// scss/View/_hero.scss

@use '../variables.scss';

@use 'sass:color';

%button-base {
  border: none;
  padding: 10px 20px;
  font-size: 1rem;
  font-family: var(--font-secondary);
  border-radius: 5px;
  cursor: pointer;
  text-decoration: none;
  display: inline-block;
  text-align: center;
  transition: filter var(--transition-speed) var(--transition-ease),
              background-color var(--transition-speed) var(--transition-ease),
              color var(--transition-speed) var(--transition-ease);
  &:hover {
     filter: brightness(1.1);
  }
}

%button-primary-variant {
  @extend %button-base;
  background-color: var(--primary-color);
  color: var(--button-text-color);
}


:host {
  display: block;
  box-sizing: border-box;
  width: 100%;
  font-family: var(--font-primary);
  padding: 60px 20px;
  position: relative;
  overflow: hidden;
  min-height: 40vh;
  color: variables.$light-bg;

  // --- Gradient Definition (Light Mode) ---
  $base-color: variables.$light-primary;
  $hero-gradient-color-2-light: color.adjust($base-color, $hue: 20);
  background: linear-gradient(135deg, $base-color 0%, $hero-gradient-color-2-light 100%);

  // --- Dark Mode Override using CSS Variables ---
  // The background gradient uses Sass variables, so it won't change automatically.
  // If you need the gradient to change, you must define it using CSS variables or use :host-context()
  // For now, we rely on text/button colors changing via CSS variables.
}

// Style elements INSIDE the shadow root
.hero-content {
  position: relative;
  z-index: 1;
  max-width: 700px;
  margin: 0 auto;
  text-align: center;

  h1 {
    font-size: 2.8rem;
    margin-bottom: 15px;
    font-weight: bold;
    color: inherit;
  }

  p {
    font-size: 1.2rem;
    margin-bottom: 30px;
    line-height: 1.6;
    max-width: 60ch;
    opacity: 0.9;
    color: inherit;
  }

  .cta-btn {
    @extend %button-base;
    background-color: var(--container-bg);
    color: var(--primary-color);
    padding: 12px 25px;
    font-size: 1.1rem;
    font-weight: bold;

    &:hover {
      filter: brightness(1.05) contrast(1.1);
    }
  }
}

@media (max-width: variables.$breakpoint-md) {
  :host {
    padding: 50px 15px;
    min-height: 35vh;
  }
  .hero-content {
    h1 { font-size: 2.2rem; }
    p { font-size: 1.1rem; }
    .cta-btn { padding: 10px 20px; font-size: 1rem; }
  }
}

@media (max-width: variables.$breakpoint-sm) {
 :host {
    padding: 40px 15px;
    min-height: 30vh;
  }
   .hero-content {
    h1 { font-size: 1.8rem; }
    p { font-size: 1rem; }
  }
}